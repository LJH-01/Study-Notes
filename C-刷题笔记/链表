# 链表   

## 链表题目特点  
> 链表的题目一般不是很难，关键考察代码实现能力，在做题的时候尤其要主义的是边界条件。   
1. 头节点为空
```
if(head==null) return head; 
```
2. 链表的反转操作。 
```
ListNode pre = new ListNode(0);
ListNode cur = head;
ListNode nxt = null;
while(cur!=null){
    nxt = cur.next; //写在这里保证不为空
    cur.next = pre;
    pre = cur;
    cur = nxt;
}
```
3.复杂链表复制   
```
三个步骤：
1. 将每一个节点复制到紧跟在它自己身后
2. 修改每个新复制的节点的乱序指针。
3. 链表分裂，将链表分裂成两个链表。     
//copy
        while(cur!=null){
            nxt = cur.next;
            cur.next = new RandomListNode(cur.label);
            cur.next.next = nxt;
            cur = nxt;
        }
        cur = pHead;
        RandomListNode curCopy= null;
        //modify random
        while(cur!=null){
            nxt = cur.next.next;
            curCopy = cur.next;
            curCopy.random = cur.random != null ? cur.random.next : null;
            cur = nxt;
        }
        //split
        RandomListNode res = pHead.next;
        cur = pHead;
        while(cur!=null){
            nxt = cur.next.next;
            curCopy = cur.next;
            cur.next = nxt;
            curCopy.next = nxt != null ? nxt.next : null;
            cur = nxt;
        }
```
4. 环形链表及相交问题  
    1. 判断是否相交，快慢指针法。 快慢指针要满足的条件：  
        1. 是否会相遇。
        2. 相遇后，将快指针重新指向头，然后双指针每次一步，一定可以于入口处相交。
    2. 无环链表相交，先求两链表的长度，然后让长的先走。  
    3. 环形链表相交的判断，先找两者环入口，然后两种情况。1入口相同，则按照无环链表相交的方法继续；
    否则在环内看是否能追上。  
    4. 综合起来就是链表相交的判断方法：1，看是否有环，yes+yes, 按照两个环形处理，2，yes+no --false 3，no+no 安无环链表处理。